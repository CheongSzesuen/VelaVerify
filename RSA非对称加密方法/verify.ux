<template>
  <div class="container">
    <!-- 标题区域 -->
    <div class="header">
      <text class="title-text">{{ title }}</text>
      <text class="status-text {{connectionStatus === '已连接' ? 'active-status' : 'inactive-status'}}">
        {{connectionStatus}}
      </text>
    </div>

    <!-- 主体内容 - 纵向排列 -->
    <div class="content-column">
      

      <!-- 二维码显示区域 -->
      <div class="qrcode-container" if="{{deviceId}}">
        <div class="qrcode-content">
        <qrcode value="{{deviceId}}" class="qrcode"></qrcode>
        </div>
        <text class="qrcode-desc">使用AstroBox插件激活</text>
        <text class="qrcode-desc">请前往astrobox.online下载</text>
      </div>
      <div class="openDetailMenu" onclick="toggleDetail">
        <text class="openDetailMenuText">{{ showDetail ? '收起详情' : '打开详情' }}</text>
      </div>
      <!-- 设备ID显示 -->
      <div class="status-item" if="{{showDetail}}">
        <text class="status-title">设备ID:</text>
        <text class="status-value">{{deviceId || '未获取'}}</text>
      </div>
      <!-- 数据接收状态 -->
      <div class="status-item" if="{{showDetail}}">
        <text class="status-title">数据接收:</text>
        <text class="status-value {{hasReceivedData ? 'active-status' : 'inactive-status'}}">
          {{hasReceivedData ? '已接收数据' : '未接收数据'}}
        </text>
      </div>

      <!-- 文件状态 -->
      <div class="status-item" if="{{showDetail}}">
        <text class="status-title">文件状态:</text>
        <text class="status-value {{fileStatus === '有效' ? 'active-status' : 'inactive-status'}}">
          {{fileStatus || '未检测'}}
        </text>
      </div>

      <!-- 验证状态 -->
      <div class="status-item" if="{{showDetail}}">
        <text class="status-title">验证状态:</text>
        <text class="status-value {{verificationStatus === '验证通过' ? 'active-status' : 'inactive-status'}}">
          {{verificationStatus || '未验证'}}
        </text>
      </div>

      <!-- 操作按钮 - 纵向排列 -->
      <div class="button-column" if="{{showDetail}}">
        <input class="btn" type="button" value="获取设备ID" onclick="getDeviceId" />
        <input class="btn" type="button" value="检测文件" onclick="checkVerifyFile" />
        <input class="btn" type="button" value="验证数据" onclick="verifyData" />
        <input class="btn btn-clear" type="button" value="清除数据文件" onclick="clearDataFile" />
        <input class="btn btn-exit" type="button" value="退出应用" onclick="exitApp" />
      </div>

      <!-- 最新数据展示 -->
      <div class="data-item" if="{{latestData && showDetail}}">
        <text class="data-title">最新数据:</text>
        <text class="data-content">{{latestData}}</text>
      </div>

      <!-- 数据来源提示 -->
      <div class="data-source" if="{{latestData && showDetail}}">
        <text class="source-text">数据来源: {{dataSource}}</text>
      </div>
    </div>
  </div>
</template>

<script>
  // 注意：已移除 import interconnect ...
  import file from "@system.file"
  import app from "@system.app"
  import device from "@system.device"
  import crypto from "@system.crypto"
  import router from "@system.router" // 新增：导入router模块
  import { showToast } from "@system.prompt"

  // 注意：已移除 const connect = interconnect.instance()

  export default {
    // 页面级组件的数据模型
    private: {
      title: "设备激活验证",
      deviceId: "",
      connectionStatus: "未连接",
      hasReceivedData: false,
      latestData: "",
      fileStatus: "未检测",
      verificationStatus: "未验证",
      isDefaultDeviceId: false,
      dataSource: "", 
      showDetail: false,

      // 数据文件路径
      dataFilePath: "internal://files/activation_data.txt",

      // 内置公钥
      rsaPublicKey: `填入你自己的公钥`,

      // 默认设备ID
      defaultDeviceId: "d4cd0dabcf4caa22ad92fab40844c786"
    },

    onShow() {
      // 获取设备ID
      this.getDeviceId()

      // 检查是否有保存的数据文件
      this.checkDataFile()

      // 更新连接状态
      this.connectionStatus = "等待连接"

      // ****** 从 $app.$def 获取 connect 实例 ******
      const connect = this.$app.$def.connectInstance;

      if (!connect) {
         console.error("Failed to get interconnect instance from app.ux");
         showToast({ message: "连接初始化失败", duration: 500 });
         return;
      }

      // ****** 设置消息接收回调 (使用页面上下文 this) ******
      connect.onmessage = (data) => {
        // 注意：这里的 this 指向当前页面实例
        this.hasReceivedData = true
        this.latestData = data.data
        this.dataSource = "实时接收"
        showToast({ message: "接收到新数据", duration: 500 })

        // 保存接收到的数据到文件
        this.saveDataToFile(data.data)

        // 接收到数据后自动验证
        this.verifyData()

        this.$update()
      }

      // ****** 设置连接打开回调 (使用页面上下文 this) ******
      connect.onopen = (data) => {
        // 注意：这里的 this 指向当前页面实例
        this.connectionStatus = "已连接"
        showToast({ message: "连接已建立", duration: 500 })
        this.$update()
      }

      // ****** 设置错误处理 (使用页面上下文 this) ******
      connect.onerror = (error) => {
        // 注意：这里的 this 指向当前页面实例
        this.connectionStatus = "连接错误"
        console.error("Connection error:", error)
        showToast({ message: "连接出错", duration: 500 })
        this.$update()
      }

      // ****** 设置连接关闭处理 (使用页面上下文 this) ******
      connect.onclose = () => {
        // 注意：这里的 this 指向当前页面实例
        this.connectionStatus = "已断开"
        console.log("Connection closed")
        showToast({ message: "连接已断开", duration: 500 })
        this.$update()

        // 尝试重新连接 (注意：这里也是页面上下文)
        setTimeout(() => {
           if (this.$valid) { // 检查页面是否仍然有效
             connect.open()
           }
        }, 5000)
      }

      // 打开连接
      connect.open()
    },

    // 切换详情显示
    toggleDetail() {
      this.showDetail = !this.showDetail;
      this.$update();
    },

    // 检查数据文件是否存在并读取
    checkDataFile() {
      file.access({
        uri: this.dataFilePath,
        success: () => {
          // 文件存在，读取内容
          file.readText({
            uri: this.dataFilePath,
            success: (data) => {
              if (data.text && data.text.trim()) {
                this.latestData = data.text.trim();
                this.dataSource = "文件读取";
                this.fileStatus = "有效";
                showToast({ message: "从文件加载数据成功", duration: 500 });

                // 自动验证文件中的数据
                this.verifyData();
              } else {
                this.fileStatus = "空文件";
                showToast({ message: "数据文件为空", duration: 500 });
              }
              this.$update();
            },
            fail: (errData, code) => {
              this.fileStatus = "读取失败";
              showToast({ message: `文件读取失败: ${code}`, duration: 500 });
              this.$update();
            }
          });
        },
        fail: () => {
          // 文件不存在，正常流程
          this.fileStatus = "未检测";
          this.$update();
        }
      });
    },

    // 保存数据到文件
    saveDataToFile(data) {
      file.writeText({
        uri: this.dataFilePath,
        text: data,
        success: () => {
          console.log("数据保存到文件成功");
          this.fileStatus = "已保存";
          this.$update();
        },
        fail: (errData, code) => {
          console.error(`数据保存失败: ${code}`);
          showToast({ message: `数据保存失败: ${code}`, duration: 500 });
        }
      });
    },

    // 获取设备ID（已修改处理NA情况）
    getDeviceId() {
      device.getDeviceId({
        success: (data) => {
          // 处理返回NA的情况
          if (data.deviceId === "NA" || !data.deviceId) {
            this.deviceId = this.defaultDeviceId;
            this.isDefaultDeviceId = true;
            showToast({ message: "设备不支持ID获取，使用默认ID", duration: 500 });
          } else {
            this.deviceId = data.deviceId;
            this.isDefaultDeviceId = false;
            showToast({ message: "设备ID获取成功", duration: 500 });
          }
          this.$update();
        },
        fail: (err) => {
          this.deviceId = this.defaultDeviceId;
          this.isDefaultDeviceId = true;
          showToast({ message: "设备ID获取失败，使用默认ID", duration: 500 });
          this.$update();
        }
      });
    },

    // 检测verify文件内容（保留原有功能）
    checkVerifyFile() {
      file.readText({
        uri: "internal://files/activation_data.txt",
        success: (data) => {
          if (data.text && data.text.trim()) {
            this.fileStatus = "有效"
            this.latestData = data.text.trim()
            this.dataSource = "verify文件"
            showToast({ message: "文件内容有效", duration: 500 })

            // 保存到数据文件
            this.saveDataToFile(data.text.trim())

            // 检测到文件后自动验证
            this.verifyData()
          } else {
            this.fileStatus = "空文件"
            showToast({ message: "文件内容为空", duration: 500 })
          }
          this.$update()
        },
        fail: (errData, code) => {
          this.fileStatus = "无效/不存在"
          showToast({ message: `文件检测失败: ${code}`, duration: 500 })
          this.$update()
        }
      })
    },

    // 验证数据
    verifyData() {
      if (!this.latestData) {
        showToast({ message: "请先获取数据", duration: 500 })
        return
      }

      const parts = this.latestData.split(':')
      if (parts.length !== 3) {
        this.verificationStatus = "数据格式错误"
        showToast({ message: "数据格式应为 设备ID:激活码:签名:包名", duration: 500 })
        
        return
      }

      const dataDeviceId = parts[0]
      const activationCode = parts[1]
      const signature = parts[2]

      if (dataDeviceId !== this.deviceId) {
        this.verificationStatus = "设备ID不匹配"
        showToast({ message: "设备ID不匹配", duration: 500 })
        
        return
      }

      const dataToVerify = `${dataDeviceId}:${activationCode}`
      crypto.verify({
        data: dataToVerify,
        signature: signature,
        publicKey: this.rsaPublicKey,
        algo: "RSA-SHA256",
        success: (isValid) => {
          if (isValid) {
            this.verificationStatus = "验证通过"
            showToast({ message: "签名验证成功", duration: 500 })
            setTimeout(() => {
              router.replace({ uri: '/pages/index' })
            }, 0)
          } else {
            this.verificationStatus = "签名不合法"
            showToast({ message: "签名验证失败", duration: 500 })
          }
        },
        fail: (err) => {
          this.verificationStatus = "验证失败"
          showToast({ message: `验证出错: ${err.code || '未知错误'}`, duration: 500 })
        }
      })
    },

    // 清除数据文件
    clearDataFile() {
      file.delete({
        uri: this.dataFilePath,
        success: () => {
          this.latestData = "";
          this.fileStatus = "未检测";
          this.verificationStatus = "未验证";
          this.dataSource = "";
          showToast({ message: "数据文件已清除", duration: 500 });
          this.$update();
        },
        fail: (errData, code) => {
          showToast({ message: `清除失败: ${code}`, duration: 500 });
        }
      });
    },

    exitApp() {
      // 退出应用
      app.terminate()
    }
  }
</script>

<style>
.container {
  flex-direction: column;
  background-color: #000;
  height: 100%;
  width: 100%;
}

/* 标题区域 */
.header {
  width: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  margin-bottom: 10px;
}

.title-text {
  font-size: 25px;
  color: #fff;
  text-align: center;
}

.status-text {
  font-size: 28px;
}
/* .status-text.active-status {
  color: #4caf50;
}

.status-text.inactive-status {
  color: #f44336;
} */

/* 内容区域 - 纵向排列 */
.content-column {
  flex-direction: column;
  align-items: center;
  width: 100%;
}

.status-item {
  flex-direction: column;
  width: 80%;
  margin-bottom: 15px;
  padding: 15px;
  background-color: rgba(255,255,255,0.1);
  border-radius: 10px;
}

.status-title {
  font-size: 24px;
  color: #e0e0e0;
  margin-bottom: 8px;
}

.status-value {
  font-size: 24px;
  font-weight: bold;
}

.status-value.active-status {
  color: #4caf50;
}

.status-value.inactive-status {
  color: #f44336;
}

/* 二维码容器 */
.qrcode-content {
  flex-direction: column;
  align-items: center;
  width: 100%;
  margin-bottom: 10px;
}
.qrcode-container{
  flex-direction: column;
  align-items: center;
  margin-bottom: 10px;
}
.qrcode {
  width: 150px;
  height: 150px;
}

.qrcode-desc {
  font-size: 18px;
  color: #aaa;
}

.data-item {
  flex-direction: column;
  width: 80%;
  margin-bottom: 15px;
  padding: 15px;
  background-color: rgba(255,255,255,0.1);
  border-radius: 10px;
}

.data-title {
  font-size: 20px;
  color: #e0e0e0;
  margin-bottom: 10px;
}

.data-content {
  font-size: 16px;
  color: #fff;
  word-break: break-all;
}

.data-source {
  width: 80%;
  margin-bottom: 20px;
}

.source-text {
  font-size: 14px;
  color: #aaa;
  text-align: center;
}

/* 按钮纵向排列 */
.button-column {
  flex-direction: column;
  align-items: center;
  width: 80%;
  margin-top: 20px;
  margin-bottom: 20px;
}

.btn {
  width: 80%;
  height: 50px;
  border-radius: 8px;
  background-color: #09ba07;
  font-size: 18px;
  color: #ffffff;
  margin-bottom: 15px;
}

.btn-clear {
  background-color: #FF9800;
}

.btn-exit {
  background-color: #F44336;
}
.openDetailMenu{
  flex-direction: column;
  width: 80%;
  margin-bottom: 15px;
  padding: 10px 0px;
  background-color: rgba(255,255,255,0.1);
  border-radius: 20px;
}
.openDetailMenuText{
  font-size: 24px;
  color: #fff;
  text-align: center;
}
/* 多屏适配 */
@media (shape: circle) {
  .header {
    padding-top: 18%;
  }
  
.title-text {
  font-size: 32px;
  color: #fff;
  text-align: center;
}
.status-text {
  font-size: 31px;
}

  .data-item,
  .qrcode-content,
  .data-source {
    width: 100%;
  }
  
  .status-item{
    width: 80%;
  }
  .qrcode {
    width: 210px;
    height: 210px;
  }
  .qrcode-desc {
    font-size: 22px;
  }
  .button-column{
    width: 80%;
  }
  .btn {
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    font-size: 30px;
    height: 65px;
  }
}

@media (shape: rect) {
  .header {
    padding-top: 5%;
  }
  .title-text {
    font-size: 36px;
  }
  .status-text {
    font-size: 35px;
  }
  .status-title,
  .status-value,
  .data-title {
    font-size: 28px;
  }
  .data-content {
    font-size: 20px;
  }
  .source-text {
    font-size: 18px;
  }
  .btn {
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    font-size: 22px;
    height: 60px;
  }
  .qrcode {
    width: 218px;
    height: 218px;
  }
  .qrcode-desc {
    font-size: 22px;
  }

}

@media (shape: pill-shaped) {
  .header {
    padding-top: 60px;
  }
  .title-text {
    font-size: 30px;
  }
  .status-text {
    font-size: 27px;
  }
  .content-column,
  .data-item {
    padding: 0px;
  }
  .status-item {
    width: 95%;
  }
  .status-title{
    font-size: 20px;
  }
  .status-value{
    font-size: 20px;
  }
  .data-title {
    font-size: 32px;
  }
  .data-content {
    font-size: 26px;
  }
  .source-text {
    font-size: 20px;
  }
  .btn {
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    font-size: 20px;
    height: 50px;
  }
  .qrcode {
    width: 180px;
    height: 180px;
  }
  .qrcode-desc {
    font-size: 15px;
  }
  .qrcode-content {
  flex-direction: column;
  align-items: center;
  width: 100%;
  margin-bottom: 10px;
}
.qrcode-container{
  flex-direction: column;
  align-items: center;
  margin-bottom: 10px;
}
.button-column{
  flex-direction: column;
  align-items: center;
  width: 90%;
  margin-top: 20px;
  margin-bottom: 20px;
}
}
</style>